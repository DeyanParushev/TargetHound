@page "/Planning/{name}/{declination:double}/"
@page "/Planning/{projectId}"

@inject HttpClient client
@inject IJSRuntime jsRuntime
@inject IStateService stateService
@inject NavigationManager navigator

<div class="d-flex flex-md-row justify-content-between">
    <EditForm Model="@this.Select" class="col-6 p-0 mx-1">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputSelect @bind-Value="@this.Select" class="form-control container-fluid">
            <option selected="selected" value="@string.Empty"> -- Choose display option -- </option>
            <option value="One">Display individual borehole</option>
            <option value="Many">Display few boreholes</option>
        </InputSelect>
    </EditForm>

    <div class="col-6 p-0 mx-1">
        <CascadingValue Value="@this.RefreshIsRequested">
            <DisplayBorehole Display="@this.Select" Boreholes="@this.Boreholes" Refresh="@this.Refresh" />
        </CascadingValue>
    </div>
</div>
<div class="p-0 m-0 flex-row">
    <section class="sidebar p-0 m-0">
        <Infobox />
    </section>

    <div class="3dContainer p-0 m-0">
    </div>
</div>

@code {
    private ProjectDTO Project = null;

    private IJSObjectReference jsModule;

    protected bool RefreshIsRequested { get; set; } = false;

    public IList<BoreholeDTO> Boreholes { get; set; } = new List<BoreholeDTO>();

    public string Select { get; set; } = string.Empty;

    [Parameter]
    public string ProjectId { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public double Declination { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (this.stateService.IsInitialLoading && this.ProjectId != null)
        {
            this.Project = await client.GetFromJsonAsync<ProjectDTO>($"api/ProjectApi/{ProjectId}");

            this.stateService.Project = this.Project;
            this.stateService.IsInitialLoading = false;
        }
        else if (this.stateService.IsInitialLoading && this.ProjectId == null)
        {
            this.Project = new ProjectDTO
            {
                Id = Guid.NewGuid().ToString(),
                Name = this.Name,
                MagneticDeclination = this.Declination,
            };
            this.stateService.Project = this.Project;
            this.stateService.IsInitialLoading = false;
        }
        else
        {
            this.Project = this.stateService.Project;
        }
        Console.WriteLine(this.Project.Name);
        Console.WriteLine(this.Project.Id);
        this.jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/app.js");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (this.stateService.BoreholeToDisplayId != null)
        {
            BoreholeDTO borehole = this.stateService.Project.Boreholes.FirstOrDefault(x => x.Id == this.stateService.BoreholeToDisplayId);
            var result = this.jsModule.InvokeVoidAsync("RenderBorehole", borehole).GetAwaiter();
            Console.WriteLine(result);
        }
        else
        {
            this.jsModule.InvokeVoidAsync("RenderProject", this.Project).GetAwaiter();
        }
    }

    public void Refresh(bool refresh)
    {
        if (refresh)
        {
            this.RefreshIsRequested = !refresh;
            this.StateHasChanged();
        }
    }
}