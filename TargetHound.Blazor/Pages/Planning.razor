@page "/Planning/{name}/{declination:double}/"
@page "/Planning/{projectId}"
@inject HttpClient client
@inject IJSRuntime jsRuntime
@inject IStateService stateService
@inject NavigationManager navigator

<div class="row bg-light mx-0 px-0">
    <div class="form-group">
        <EditForm Model="@Borehole">
            <label for="@this.Borehole" class="text-center font-weight-bold d-block"></label>
            <InputSelect @bind-Value="@this.Borehole" class="form-control">
                <option selected="selected">Borehole...</option>
                @foreach (var borehole in this.Boreholes)
                {
                    <option class="form-control" value="@borehole.Id" @onclick="RenderBorehole">@borehole.Name</option>
                }
            </InputSelect>
        </EditForm>
    </div>
</div>

<div class="p-0 m-0 flex-row">
    <section class="sidebar p-0 m-0">
        <Infobox />
    </section>

    <div class="3dContainer p-0 m-0">
    </div>
</div>


@code {
    private ProjectDTO project = null;
    private ICollection<BoreholeDTO> Boreholes { get; set; }
    private IJSObjectReference jsModule;

    [Parameter]
    public string ProjectId { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public double Declination { get; set; }

    public BoreholeDTO Borehole { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        this.Boreholes = this.project.Boreholes;
        this.Borehole = new BoreholeDTO();
        return;
    }

    protected override async Task OnInitializedAsync()
    {
        if (ProjectId != null)
        {
            this.project = await client.GetFromJsonAsync<ProjectDTO>($"api/ProjectApi/{ProjectId}");
            this.jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/app.js");

        }
        else
        {
            this.project = new ProjectDTO
            {
                Name = this.Name,
                MagneticDeclination = this.Declination,
            };
        }

        if (this.project == null)
        {
            this.navigator.NavigateTo("/Error");
        }
        else
        {
            this.stateService.Project = this.project;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        this.jsModule.InvokeVoidAsync("render", this.project).GetAwaiter();
    }

    public void RenderBorehole()
    {
        Console.WriteLine(this.Borehole);
    }
}