@page "/Planning/{name}/{declination:double}/"
@page "/Planning/{projectId}"
@inject HttpClient client
@inject IJSRuntime jsRuntime
@inject IStateService stateService

<div class="row bg-light mx-0 px-0">
    <select class="custom-select" value="this.Borehole">
        @if (this.project != null)
        {
            <option value="New">New borehole</option>

            @foreach (var borehole in this.project.Boreholes)
            {
                <option value="@borehole.Id">@borehole.Name</option>
            }
        }
        else
        {
            <option>New</option>
        }
    </select>
</div>

<div class="p-0 m-0 flex-row">
    <section class="sidebar p-0 m-0">
        <Infobox/>
    </section>

    <div class="3dContainer p-0 m-0">
    </div>
</div>


@code {
    [Parameter]
    public string ProjectId { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public double Declination { get; set; }

    public BoreholeDTO Borehole { get; set; }

    private ProjectDTO project = null;
    private IJSObjectReference jsModule;

    protected override async Task OnInitializedAsync()
    {
        if (ProjectId != null)
        {
            this.project = await client.GetFromJsonAsync<ProjectDTO>($"api/ProjectApi/{ProjectId}");
            this.jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/app.js");
        }
        else
        {
            this.project = new ProjectDTO
            {
                Name = this.Name,
                MagneticDeclination = this.Declination,
            };
        }

        this.stateService.Project = this.project;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        this.jsModule.InvokeVoidAsync("render", this.project).GetAwaiter();
    }
}