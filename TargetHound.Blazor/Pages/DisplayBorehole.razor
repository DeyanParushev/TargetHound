@inject IStateService stateService
@inject IJSRuntime jsRuntime

@if (this.Display == "One")
{
    <EditForm Model="@this.BoreholeId" OnValidSubmit="DisplayHole" class="container-fluid row">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputSelect @bind-Value="@this.BoreholeId" class="form-control col-8">
            <option selected="selected" value="@string.Empty"> -- Select Borehole -- </option>
            @foreach (var borehole in this.Boreholes)
                {
                <option value="@borehole.Id">@borehole.Name</option>
                }
        </InputSelect>
        <button type="submit" class="btn btn-primary col-2 offset-1">Show</button>
    </EditForm>
}
else if (this.Display == "Many")
{
    // TODO: make a multiple choise collection
    <EditForm Model="@this.BoreholeIds" class="container-fluid row">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputSelect @bind-Value="this.BoreholeId" class="form-control col-8">
            <option selected="selected" value="@string.Empty"> -- Select Boreholes -- </option>
            @foreach (var borehole in this.Boreholes)
                {
                    <option value="@borehole.Id">@borehole.Name</option>
                }
        </InputSelect>
        <button class="btn btn-primary col-2 offset-1">Show</button>
    </EditForm>
}

@code {
    [Parameter]
    public string Display { get; set; }

    [Parameter]
    public IList<BoreholeDTO> Boreholes { get; set; } = new List<BoreholeDTO>();

    public ICollection<string> BoreholeIds { get; set; } = new List<string>();

    public string BoreholeId { get; set; } = string.Empty;

    [CascadingParameter]
    public bool RefreshIsRequested { get; set; }

    [Parameter]
    public Action<bool> Refresh { get; set; }

    public void DisplayHole()
    {
        this.stateService.BoreholeToDisplayId = this.BoreholeId;
        this.RefreshIsRequested = true;
        this.Refresh?.Invoke(this.RefreshIsRequested);
        this.StateHasChanged();
    }
}
