@implements IComponent
@inject HttpClient client
@inject IStateService stateService
@inject IJSRuntime jsRuntime

<EditForm Model="@this.Borehole">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <button class="btn btn-block btn-primary" @onclick="@this.ExportCsv">CSV</button>
    <button class="btn btn-block btn-primary" @onclick="@this.ExportPdf">PDF</button>
</EditForm>

@code {
    public BoreholeDTO Borehole { get; set; }

    private IJSObjectReference JsModule { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.Borehole =
            this.stateService
            .Project
            .Boreholes
            .FirstOrDefault(x => x.Name == this.stateService.BoreholeToDisplayName);

        if (this.Borehole == null)
        {
            this.Borehole = new BoreholeDTO();
        }

        this.JsModule = 
            await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helperFunctions.js");
    }

    private async Task ExportBorehole(string format)
    {
        var response = await this.client.PostAsJsonAsync<BoreholeDTO>($"api/BoreholeApi/Export{format}", this.Borehole);
        if (response.IsSuccessStatusCode)
        {
            await JsModule.InvokeVoidAsync("downloadFile", $"api/BoreholeApi/{this.Borehole.Id}", $"{this.Borehole.Name}.{format}");
        }
    }


    public async Task ExportCsv()
    {
        await this.ExportBorehole("Csv");
    }

    public async Task ExportPdf()
    {
        await this.ExportBorehole("Pdf");
    }
}
