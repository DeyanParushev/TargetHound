@inject IStateService storageService
@inject IObjectCreator objectCreator

<EditForm Model="@this" OnValidSubmit="AddToProject" class="mt-4">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group flex-sm-column">
        <label class="text-center font-weight-bold d-block">Target Name</label>
        <InputText @bind-Value="@this.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label class="text-center font-weight-bold d-block">Easting</label>
        <InputNumber @bind-Value="@this.Easting" class="form-control" />
    </div>
    <div class="form-group">
        <label class="text-center font-weight-bold d-block">Northing</label>
        <InputNumber @bind-Value="@this.Northing" class="form-control" />
    </div>

    <div class="form-group">
        <label class="text-center font-weight-bold d-block">Elevation</label>
        <InputNumber @bind-Value="@this.Elevation" class="form-control" />
    </div>

    <button type="submit" class="btn btn-success offset-4">
        Create
    </button>
    @if (this.isCreated)
    {
        <div class="text-center mt-2">
            <alert class="text-success font-weight-bold">Collar Created!</alert>
        </div>
    }
    else if (this.ShowMessage)
    {
        <div class="text-center mt-2">
            <alert class="text-danger">@this.ErrorMessage</alert>
        </div>
    }
</EditForm>

<hr style="border:0;height:1.5px;background-color: rgb(230, 230, 230); width:80%;" />

@code {
    private string Name { get; set; }
    private double Easting { get; set; }
    private double Northing { get; set; }
    private double Elevation { get; set; }

    private bool isCreated { get; set; } = false;

    public string ErrorMessage { get; set; }

    public bool ShowMessage { get; set; }

    [CascadingParameter]
    public bool RefreshIsRequested { get; set; }

    [Parameter]
    public Action<bool> Refresh { get; set; }

    public void AddToProject()
    {
        var target = this.objectCreator.CreateTarget(this.Name, this.Easting, this.Northing, this.Elevation, this.storageService.Project.Id);

        this.ShowMessage = true;

        if (this.storageService.Project.Targets.Any(x => x.Equals(target)))
        {
            this.isCreated = false;
            this.ErrorMessage = "A target with the same coordinates already exists in this project.";
        }
        else if (this.storageService.Project.Targets.Any(x => x.Name == target.Name))
        {
            this.isCreated = false;
            this.ErrorMessage = "A target with this name exists in this project.";
        }
        else
        {
            this.storageService.Project.Targets.Add(target);
            this.isCreated = true;

            this.ClearForm();

            this.RefreshIsRequested = true;
            this.Refresh?.Invoke(this.RefreshIsRequested);
        }

        this.StateHasChanged();
    }

    private void ClearForm()
    {
        this.Name = null;
        this.Easting = 0;
        this.Northing = 0;
        this.Elevation = 0;
    }
}
