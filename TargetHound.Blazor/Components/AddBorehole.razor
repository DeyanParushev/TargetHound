@inject TargetHound.Blazor.Services.IObjectCreator objectCreator
@inject IStateService storageService
@inject HttpClient client

<EditForm Model="@this.Borehole" OnValidSubmit="AddToProject" class="flex-column mt-4">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group flex-sm-column">
        <label class="text-center font-weight-bold d-block">Name</label>
        <InputText @bind-Value="@this.Borehole.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label for="@CollarName" class="text-center font-weight-bold d-block">Choose Collar</label>
        <InputSelect @bind-Value="@CollarName" class="form-control">
            <option selected="selected">Collar...</option>
            @foreach (var collar in this.Collars)
            {
                <option class="form-control" value="@collar.Name">@collar.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="@TargetName" class="text-center font-weight-bold d-block">Choose Target</label>
        <InputSelect @bind-Value="@TargetName" class="form-control">
            <option selected="selected">Target...</option>
            @foreach (var target in this.Targets)
            {
                <option class="form-control" value="@target.Name">@target.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label class="text-center font-weight-bold d-block">Azimuth change</label>
        <InputNumber @bind-Value="@this.AzimuthChange" class="form-control" />
    </div>

    <div class="form-group">
        <label class="text-center font-weight-bold d-block">Dip change</label>
        <InputNumber @bind-Value="@this.DipChange" class="form-control" />
    </div>

    <button type="submit" class="btn btn-success offset-4">
        Create
    </button>

    @if (this.IsCreated)
    {
        <div class="text-center mt-2">
            <alert class="text-success font-weight-bold">Borehole Created!</alert>
        </div>
    }
    else if (this.ShowMessage)
    {
        <div class="text-center mt-2">
            <alert class="text-danger">@this.ErrorMessage</alert>
        </div>
    }
</EditForm>

<hr style="border:0;height:1.5px;background-color: rgb(230, 230, 230); width:80%;" />

@code
{
    private bool ShowMessage { get; set; } = false;

    private string ErrorMessage { get; set; }

    private bool IsCreated { get; set; } = false;

    private bool IsStraight => this.AzimuthChange == 0 && this.DipChange == 0;

    public double AzimuthChange { get; set; } = 0;

    public double DipChange { get; set; } = 0;

    public BoreholeDTO Borehole { get; set; } = new BoreholeDTO();

    public string CollarName { get; set; }

    public string TargetName { get; set; }

    public IEnumerable<CollarDTO> Collars { get; set; }

    public IEnumerable<TargetDTO> Targets { get; set; }

    public ProjectDTO Project { get; set; }

    [CascadingParameter]
    public bool RefreshIsRequested { get; set; }

    [Parameter]
    public Action<bool> Refresh { get; set; }

    protected override void OnParametersSet()
    {
        this.Project = this.storageService.Project;
        this.Collars = this.Project.Collars;
        this.Targets = this.Project.Targets;

        return;
    }

    public async Task AddToProject()
    {
        var collar = this.Collars.FirstOrDefault(x => x.Name == this.CollarName);
        var target = this.Targets.FirstOrDefault(x => x.Name == this.TargetName);

        var borehole = new BoreholeDTO();

        if (this.IsStraight)
        {
            borehole = this.objectCreator.CreateStraightBorehole(this.Borehole.Name, collar, target);
        }
        else
        {
            borehole = this.objectCreator.CreateCurvedBorehole(this.Borehole.Name, collar, target, this.AzimuthChange, this.DipChange);
        }

        this.ShowMessage = true;

        if (this.Project.Boreholes.Any(x => x.Name == borehole.Name))
        {
            this.IsCreated = false;
            this.ErrorMessage = "A borehole with the same name already exists.";
        }
        else if (this.Project.Boreholes.Any(x => x.Equals(borehole)))
        {
            this.IsCreated = false;
            this.ErrorMessage = "A borehole with these collar and target already exists.";
        }
        else
        {
            await this.SendBorehole(borehole);
            this.storageService.Project.Boreholes.Add(borehole);
            this.IsCreated = true;
        }

        this.StateHasChanged();
    }

    private async Task SendBorehole(BoreholeDTO borehole)
    {
        var response = await this.client.PostAsJsonAsync<BoreholeDTO>($"/api/BoreholeApi/", borehole);

        if (response.IsSuccessStatusCode)
        {
            this.IsCreated = true;
        }
        else
        {
            this.IsCreated = false;
        }

        this.RefreshIsRequested = true;
        this.Refresh?.Invoke(this.RefreshIsRequested);
        this.StateHasChanged();
    }
}